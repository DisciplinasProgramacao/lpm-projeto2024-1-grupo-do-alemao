import java.time.LocalDate;

/**
 * Classe Mesa representa uma mesa em um restaurante.
 * Cada instância desta classe possui um identificador único e um status de disponibilidade.
 */
public class Mesa {
    private int id; // Identificador único da mesa
    private boolean disponivel; // Indica se a mesa está disponível ou não

    /**
     * Construtor da classe Mesa.
     * Inicializa uma mesa com o identificador fornecido e a marca como disponível.
     * @param id O identificador único da mesa.
     */
    public Mesa(int id) {
        this.id = id;
        this.disponivel = true;
    }

    /**
     * Método para obter o identificador da mesa.
     * @return O identificador único da mesa.
     */
    public int getId() {
        return id;
    }

    /**
     * Método para verificar se a mesa está disponível.
     * @return true se a mesa estiver disponível, false caso contrário.
     */
    public boolean isDisponivel() {
        return disponivel;
    }

    /**
     * Método para definir o status de disponibilidade da mesa.
     * @param disponivel O novo status de disponibilidade da mesa.
     */
    public void setDisponivel(boolean disponivel) {
        this.disponivel = disponivel;
    }
}

/**
 * Classe RequisicaoReserva representa uma solicitação de reserva em um restaurante.
 * Cada instância desta classe armazena informações sobre a reserva, como data, número de pessoas, cliente associado e mesa reservada.
 * Esta classe controla também o status da reserva.
 */
public class RequisicaoReserva {
    private static int proximoId = 1; // Variável estática para gerar identificadores únicos automaticamente
    private int id; // Identificador único da reserva
    private LocalDate dataReserva; // Data da reserva
    private boolean ativa; // Indica se a reserva está ativa ou foi cancelada
    private int pessoas; // Número de pessoas na reserva
    private Cliente cliente; // Cliente associado à reserva
    private Mesa mesa; // Mesa reservada

    /**
     * Construtor da classe RequisicaoReserva.
     * Inicializa uma reserva com os parâmetros fornecidos e gera um identificador único automaticamente.
     * Marca a mesa associada como indisponível.
     * @param dataReserva A data da reserva.
     * @param pessoas O número de pessoas na reserva.
     * @param cliente O cliente associado à reserva.
     * @param mesa A mesa reservada.
     */
    public RequisicaoReserva(LocalDate dataReserva, int pessoas, Cliente cliente, Mesa mesa) {
        this.id = proximoId++; // Gera um novo identificador único
        this.dataReserva = dataReserva;
        this.ativa = true; // Marca a reserva como ativa
        this.pessoas = pessoas;
        this.cliente = cliente;
        this.mesa = mesa;
        this.mesa.setDisponivel(false); // Marca a mesa como indisponível
    }

    /**
     * Método para obter o identificador da reserva.
     * @return O identificador único da reserva.
     */
    public int getId() {
        return id;
    }

    /**
     * Método para obter a data da reserva.
     * @return A data da reserva.
     */
    public LocalDate getDataReserva() {
        return dataReserva;
    }

    /**
     * Método para verificar se a reserva está ativa.
     * @return true se a reserva estiver ativa, false caso contrário.
     */
    public boolean isAtiva() {
        return ativa;
    }

    /**
     * Método para cancelar a reserva.
     * Marca a reserva como cancelada e marca a mesa associada como disponível.
     */
    public void cancelar() {
        this.ativa = false; // Marca a reserva como cancelada
        this.mesa.setDisponivel(true); // Marca a mesa como disponível novamente
    }

    /**
     * Método para obter o número de pessoas na reserva.
     * @return O número de pessoas na reserva.
     */
    public int getPessoas() {
        return pessoas;
    }

    /**
     * Método para obter o cliente associado à reserva.
     * @return O cliente associado à reserva.
     */
    public Cliente getCliente() {
        return cliente;
    }

    /**
     * Método para obter a mesa reservada.
     * @return A mesa reservada.
     */
    public Mesa getMesa() {
        return mesa;
    }
}
